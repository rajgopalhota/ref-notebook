import React, { useState, useRef } from 'react';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

const App = () => {
  const [formData, setFormData] = useState({
    courseCode: '',
    courseTitle: '',
    preRequisites: ['', '', '', '', '', ''],
    objectives: ['', '', '', '', '', ''],
    outcomes: [
      { text: '', poPso: '', btl: '' },
      { text: '', poPso: '', btl: '' },
      { text: '', poPso: '', btl: '' },
      { text: '', poPso: '', btl: '' },
      { text: '', poPso: '', btl: '' },
    ],
    matrix: Array(5).fill().map(() => Array(13).fill('')),
    l: '',
    t: '',
    p: '',
    s: '',
    c: '',
    ch: '',
    syllabus: ['', '', '', '', ''],
    textbooks: ['', '', ''],
    referenceBooks: ['', '', ''],
    webLinks: ['', '', '']
  });

  const pdfRef = useRef();

  const handleChange = (e, section, index, subField) => {
    const value = e.target.value;
    setFormData(prev => {
      const updated = { ...prev };
      if (section === 'preRequisites' || section === 'objectives' || section === 'syllabus' || section === 'textbooks' || section === 'referenceBooks' || section === 'webLinks') {
        updated[section][index] = value;
      } else if (section === 'outcomes') {
        updated.outcomes[index][subField] = value;
      } else if (section === 'matrix') {
        updated.matrix[index][subField] = value;
      } else {
        updated[section] = value;
      }
      return updated;
    });
  };

  const generatePDF = async () => {
    const input = pdfRef.current;
    const canvas = await html2canvas(input);
    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF('p', 'mm', 'a4');
    const imgProps = pdf.getImageProperties(imgData);
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;

    pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
    pdf.save('course-outline.pdf');
  };

  return (
    <div className="p-6 font-sans text-sm">
      <div className="mb-6">
        <h1 className="text-2xl font-bold mb-4">Course Outline Form</h1>
        <div className="grid grid-cols-2 gap-4">
          <input className="border p-2" placeholder="Course Code" value={formData.courseCode} onChange={(e) => handleChange(e, 'courseCode')} />
          <input className="border p-2" placeholder="Course Title" value={formData.courseTitle} onChange={(e) => handleChange(e, 'courseTitle')} />
        </div>
      </div>

      <div className="mb-6">
        <h2 className="font-semibold mb-2">Pre-Requisite Course(s)</h2>
        {formData.preRequisites.map((val, i) => (
          <input key={i} className="border p-1 w-full mb-1" placeholder={`Course ${i + 1}`} value={val} onChange={(e) => handleChange(e, 'preRequisites', i)} />
        ))}
      </div>

      <div className="mb-6">
        <h2 className="font-semibold mb-2">Course Objectives</h2>
        {formData.objectives.map((val, i) => (
          <input key={i} className="border p-1 w-full mb-1" placeholder={`Objective ${i + 1}`} value={val} onChange={(e) => handleChange(e, 'objectives', i)} />
        ))}
      </div>

      <div className="mb-6">
        <h2 className="font-semibold mb-2">Course Outcomes</h2>
        {formData.outcomes.map((co, i) => (
          <div key={i} className="grid grid-cols-3 gap-2 mb-1">
            <input className="border p-1" placeholder={`CO-${i + 1} Outcome`} value={co.text} onChange={(e) => handleChange(e, 'outcomes', i, 'text')} />
            <input className="border p-1" placeholder="PO/PSO" value={co.poPso} onChange={(e) => handleChange(e, 'outcomes', i, 'poPso')} />
            <input className="border p-1" placeholder="BTL" value={co.btl} onChange={(e) => handleChange(e, 'outcomes', i, 'btl')} />
          </div>
        ))}
      </div>

      <div className="mb-6 overflow-x-auto">
        <h2 className="font-semibold mb-2">Course Articulation Matrix</h2>
        <table className="table-auto border w-full text-center">
          <thead>
            <tr>
              <th></th>
              {Array.from({ length: 13 }, (_, i) => <th key={i}>{i < 11 ? `PO-${i + 1}` : `PSO ${i - 10}`}</th>)}
            </tr>
          </thead>
          <tbody>
            {formData.matrix.map((row, i) => (
              <tr key={i}>
                <td className="font-semibold">CO-{i + 1}</td>
                {row.map((cell, j) => (
                  <td key={j}>
                    <input className="border p-1 w-12" value={cell} onChange={(e) => handleChange(e, 'matrix', i, j)} />
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <div className="mb-6 grid grid-cols-6 gap-2">
        {['l','t','p','s','c','ch'].map(k => (
          <input key={k} className="border p-2" placeholder={k.toUpperCase()} value={formData[k]} onChange={(e) => handleChange(e, k)} />
        ))}
      </div>

      <div className="mb-6">
        <h2 className="font-semibold mb-2">Syllabus</h2>
        {formData.syllabus.map((val, i) => (
          <input key={i} className="border p-1 w-full mb-1" placeholder={`CO-${i + 1}`} value={val} onChange={(e) => handleChange(e, 'syllabus', i)} />
        ))}
      </div>

      {['textbooks', 'referenceBooks', 'webLinks'].map((section, i) => (
        <div key={i} className="mb-6">
          <h2 className="font-semibold mb-2">{section.replace(/([A-Z])/g, ' $1').toUpperCase()}</h2>
          {formData[section].map((val, idx) => (
            <input key={idx} className="border p-1 w-full mb-1" placeholder={`${idx + 1}`} value={val} onChange={(e) => handleChange(e, section, idx)} />
          ))}
        </div>
      ))}

      <button onClick={generatePDF} className="bg-blue-600 text-white px-4 py-2 rounded">Generate PDF</button>

      <div className="hidden" ref={pdfRef}>
        <div style={{ width: '210mm', padding: '20mm', fontSize: '12px' }}>
          <h2>Course Code: {formData.courseCode}</h2>
          <h2>Course Title: {formData.courseTitle}</h2>
          <p>Pre-Requisites: {formData.preRequisites.filter(x => x).join(', ')}</p>
          <h3>Objectives:</h3>
          <ol>{formData.objectives.filter(x => x).map((obj, i) => <li key={i}>{obj}</li>)}</ol>
          <h3>Outcomes:</h3>
          <ul>{formData.outcomes.map((o, i) => <li key={i}>CO-{i + 1}: {o.text} (PO/PSO: {o.poPso}, BTL: {o.btl})</li>)}</ul>
          <h3>Matrix:</h3>
          <table border="1" cellPadding="2">
            <thead><tr><th></th>{Array.from({ length: 13 }, (_, i) => <th key={i}>{i < 11 ? `PO-${i + 1}` : `PSO ${i - 10}`}</th>)}</tr></thead>
            <tbody>{formData.matrix.map((row, i) => (<tr key={i}><td>CO-{i + 1}</td>{row.map((c, j) => <td key={j}>{c}</td>)}</tr>))}</tbody>
          </table>
          <h3>L-T-P-S-Cr-CH:</h3>
          <p>{formData.l}-{formData.t}-{formData.p}-{formData.s}-{formData.c}-{formData.ch}</p>
          <h3>Syllabus:</h3>
          <ul>{formData.syllabus.map((s, i) => <li key={i}>CO-{i + 1}: {s}</li>)}</ul>
          <h3>Textbooks:</h3>
          <ol>{formData.textbooks.map((t, i) => <li key={i}>{t}</li>)}</ol>
          <h3>Reference Books:</h3>
          <ol>{formData.referenceBooks.map((r, i) => <li key={i}>{r}</li>)}</ol>
          <h3>MOOCs/Links:</h3>
          <ol>{formData.webLinks.map((w, i) => <li key={i}>{w}</li>)}</ol>
        </div>
      </div>
    </div>
  );
};

export default App;
